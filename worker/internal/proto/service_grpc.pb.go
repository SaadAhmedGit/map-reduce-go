// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WorkerClient is the client API for Worker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkerClient interface {
	// Meant to be called on all workers
	HeartBeat(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*EmptyMessage, error)
	// Meant to be called on mappers
	ReceiveKvStream(ctx context.Context, opts ...grpc.CallOption) (Worker_ReceiveKvStreamClient, error)
	StartMap(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*Ack, error)
	ReducerInfo(ctx context.Context, in *ReducerInfoRequest, opts ...grpc.CallOption) (*Ack, error)
	// Meant to be called on reducers
	ReducerReceiveKvStream(ctx context.Context, opts ...grpc.CallOption) (Worker_ReducerReceiveKvStreamClient, error)
	StartReduce(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (Worker_StartReduceClient, error)
}

type workerClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkerClient(cc grpc.ClientConnInterface) WorkerClient {
	return &workerClient{cc}
}

func (c *workerClient) HeartBeat(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := c.cc.Invoke(ctx, "/proto.Worker/HeartBeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) ReceiveKvStream(ctx context.Context, opts ...grpc.CallOption) (Worker_ReceiveKvStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Worker_ServiceDesc.Streams[0], "/proto.Worker/ReceiveKvStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &workerReceiveKvStreamClient{stream}
	return x, nil
}

type Worker_ReceiveKvStreamClient interface {
	Send(*Kv) error
	CloseAndRecv() (*Ack, error)
	grpc.ClientStream
}

type workerReceiveKvStreamClient struct {
	grpc.ClientStream
}

func (x *workerReceiveKvStreamClient) Send(m *Kv) error {
	return x.ClientStream.SendMsg(m)
}

func (x *workerReceiveKvStreamClient) CloseAndRecv() (*Ack, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Ack)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *workerClient) StartMap(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/proto.Worker/StartMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) ReducerInfo(ctx context.Context, in *ReducerInfoRequest, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/proto.Worker/ReducerInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) ReducerReceiveKvStream(ctx context.Context, opts ...grpc.CallOption) (Worker_ReducerReceiveKvStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Worker_ServiceDesc.Streams[1], "/proto.Worker/ReducerReceiveKvStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &workerReducerReceiveKvStreamClient{stream}
	return x, nil
}

type Worker_ReducerReceiveKvStreamClient interface {
	Send(*Kv) error
	CloseAndRecv() (*Ack, error)
	grpc.ClientStream
}

type workerReducerReceiveKvStreamClient struct {
	grpc.ClientStream
}

func (x *workerReducerReceiveKvStreamClient) Send(m *Kv) error {
	return x.ClientStream.SendMsg(m)
}

func (x *workerReducerReceiveKvStreamClient) CloseAndRecv() (*Ack, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Ack)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *workerClient) StartReduce(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (Worker_StartReduceClient, error) {
	stream, err := c.cc.NewStream(ctx, &Worker_ServiceDesc.Streams[2], "/proto.Worker/StartReduce", opts...)
	if err != nil {
		return nil, err
	}
	x := &workerStartReduceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Worker_StartReduceClient interface {
	Recv() (*Chunk, error)
	grpc.ClientStream
}

type workerStartReduceClient struct {
	grpc.ClientStream
}

func (x *workerStartReduceClient) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WorkerServer is the server API for Worker service.
// All implementations must embed UnimplementedWorkerServer
// for forward compatibility
type WorkerServer interface {
	// Meant to be called on all workers
	HeartBeat(context.Context, *EmptyMessage) (*EmptyMessage, error)
	// Meant to be called on mappers
	ReceiveKvStream(Worker_ReceiveKvStreamServer) error
	StartMap(context.Context, *EmptyMessage) (*Ack, error)
	ReducerInfo(context.Context, *ReducerInfoRequest) (*Ack, error)
	// Meant to be called on reducers
	ReducerReceiveKvStream(Worker_ReducerReceiveKvStreamServer) error
	StartReduce(*EmptyMessage, Worker_StartReduceServer) error
	mustEmbedUnimplementedWorkerServer()
}

// UnimplementedWorkerServer must be embedded to have forward compatible implementations.
type UnimplementedWorkerServer struct {
}

func (UnimplementedWorkerServer) HeartBeat(context.Context, *EmptyMessage) (*EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HeartBeat not implemented")
}
func (UnimplementedWorkerServer) ReceiveKvStream(Worker_ReceiveKvStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ReceiveKvStream not implemented")
}
func (UnimplementedWorkerServer) StartMap(context.Context, *EmptyMessage) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartMap not implemented")
}
func (UnimplementedWorkerServer) ReducerInfo(context.Context, *ReducerInfoRequest) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReducerInfo not implemented")
}
func (UnimplementedWorkerServer) ReducerReceiveKvStream(Worker_ReducerReceiveKvStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ReducerReceiveKvStream not implemented")
}
func (UnimplementedWorkerServer) StartReduce(*EmptyMessage, Worker_StartReduceServer) error {
	return status.Errorf(codes.Unimplemented, "method StartReduce not implemented")
}
func (UnimplementedWorkerServer) mustEmbedUnimplementedWorkerServer() {}

// UnsafeWorkerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkerServer will
// result in compilation errors.
type UnsafeWorkerServer interface {
	mustEmbedUnimplementedWorkerServer()
}

func RegisterWorkerServer(s grpc.ServiceRegistrar, srv WorkerServer) {
	s.RegisterService(&Worker_ServiceDesc, srv)
}

func _Worker_HeartBeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).HeartBeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Worker/HeartBeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).HeartBeat(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_ReceiveKvStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WorkerServer).ReceiveKvStream(&workerReceiveKvStreamServer{stream})
}

type Worker_ReceiveKvStreamServer interface {
	SendAndClose(*Ack) error
	Recv() (*Kv, error)
	grpc.ServerStream
}

type workerReceiveKvStreamServer struct {
	grpc.ServerStream
}

func (x *workerReceiveKvStreamServer) SendAndClose(m *Ack) error {
	return x.ServerStream.SendMsg(m)
}

func (x *workerReceiveKvStreamServer) Recv() (*Kv, error) {
	m := new(Kv)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Worker_StartMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).StartMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Worker/StartMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).StartMap(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_ReducerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReducerInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).ReducerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Worker/ReducerInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).ReducerInfo(ctx, req.(*ReducerInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_ReducerReceiveKvStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WorkerServer).ReducerReceiveKvStream(&workerReducerReceiveKvStreamServer{stream})
}

type Worker_ReducerReceiveKvStreamServer interface {
	SendAndClose(*Ack) error
	Recv() (*Kv, error)
	grpc.ServerStream
}

type workerReducerReceiveKvStreamServer struct {
	grpc.ServerStream
}

func (x *workerReducerReceiveKvStreamServer) SendAndClose(m *Ack) error {
	return x.ServerStream.SendMsg(m)
}

func (x *workerReducerReceiveKvStreamServer) Recv() (*Kv, error) {
	m := new(Kv)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Worker_StartReduce_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WorkerServer).StartReduce(m, &workerStartReduceServer{stream})
}

type Worker_StartReduceServer interface {
	Send(*Chunk) error
	grpc.ServerStream
}

type workerStartReduceServer struct {
	grpc.ServerStream
}

func (x *workerStartReduceServer) Send(m *Chunk) error {
	return x.ServerStream.SendMsg(m)
}

// Worker_ServiceDesc is the grpc.ServiceDesc for Worker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Worker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Worker",
	HandlerType: (*WorkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HeartBeat",
			Handler:    _Worker_HeartBeat_Handler,
		},
		{
			MethodName: "StartMap",
			Handler:    _Worker_StartMap_Handler,
		},
		{
			MethodName: "ReducerInfo",
			Handler:    _Worker_ReducerInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReceiveKvStream",
			Handler:       _Worker_ReceiveKvStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ReducerReceiveKvStream",
			Handler:       _Worker_ReducerReceiveKvStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "StartReduce",
			Handler:       _Worker_StartReduce_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service.proto",
}
